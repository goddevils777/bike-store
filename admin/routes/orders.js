const express = require('express');
const adminAuth = require('../middleware/adminAuth');
const Order = require('../models/Order');
const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
router.get('/:hash/api/orders', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const { status, dateFrom, dateTo, page = 1, limit = 20 } = req.query;

        const filters = {};
        if (status) filters.status = status;
        if (dateFrom) filters.dateFrom = dateFrom;
        if (dateTo) filters.dateTo = dateTo;

        const orders = await Order.getAll(filters);

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const offset = (page - 1) * limit;
        const paginatedOrders = orders.slice(offset, offset + parseInt(limit));

        res.json({
            orders: paginatedOrders,
            pagination: {
                total: orders.length,
                page: parseInt(page),
                limit: parseInt(limit),
                totalPages: Math.ceil(orders.length / limit)
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤' });
    }
});


// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
router.get('/:hash/api/orders/stats/summary', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const stats = await Order.getStats();
        res.json(stats);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

// –ù–ê–ô–¢–ò –ò –ó–ê–ú–ï–ù–ò–¢–¨ –ú–ê–†–®–†–£–¢ /export –ù–ê:
router.get('/:hash/api/orders/export', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const { status, dateFrom, dateTo } = req.query;

        const filters = {};
        if (status) filters.status = status;
        if (dateFrom) filters.dateFrom = dateFrom;
        if (dateTo) filters.dateTo = dateTo;

        const orders = await Order.getAll(filters);

        // –°–æ–∑–¥–∞–µ–º CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        const csvHeader = 'ID,–î–∞—Ç–∞,–¢–æ–≤–∞—Ä,–ö–ª–∏–µ–Ω—Ç,Email,–¢–µ–ª–µ—Ñ–æ–Ω,–ê–¥—Ä–µ—Å,–¶–µ–Ω–∞,–°—Ç–∞—Ç—É—Å\n';

        const csvRows = orders.map(order => {
            const date = new Date(order.created_at).toLocaleDateString('ru-RU');
            return [
                order.id,
                `"${date}"`,
                `"${order.product_title.replace(/"/g, '""')}"`, // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
                `"${order.customer_name.replace(/"/g, '""')}"`,
                order.customer_email,
                `"${order.customer_phone || ''}"`,
                `"${order.customer_address || ''}"`,
                `"${order.product_price}"`,
                order.status
            ].join(',');
        }).join('\n');

        const csvContent = csvHeader + csvRows;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const filename = `orders_${new Date().toISOString().split('T')[0]}.csv`;
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

        // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        res.send('\uFEFF' + csvContent);

        console.log(`üì• –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤: ${orders.length} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª ${filename}`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
router.get('/:hash/api/orders/:id', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const order = await Order.getById(req.params.id);

        if (!order) {
            return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.json(order);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
router.put('/:hash/api/orders/:id/status', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const { status } = req.body;

        if (!status) {
            return res.status(400).json({ error: '–°—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
        const adminConfig = require('../../config/admin-config.json');
        const validStatuses = adminConfig.orderStatuses.map(s => s.value);

        if (!validStatuses.includes(status)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
        }

        const result = await Order.updateStatus(req.params.id, status);

        if (!result.updated) {
            return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.json({
            success: true,
            message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω',
            order: result
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' });
    }
});


module.exports = router;