const express = require('express');
const adminAuth = require('../middleware/adminAuth');
const Settings = require('../models/Settings');
const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
router.get('/:hash/api/settings', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const settings = await Settings.getAll();
        res.json(settings);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
router.get('/:hash/api/settings/contacts', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const contacts = await Settings.getContacts();
        res.json(contacts);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
router.put('/:hash/api/settings/contacts', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const { email, phone, hours } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!email || !phone || !hours) {
            return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
        }
        
        await Settings.updateContacts({ email, phone, hours });
        
        res.json({ 
            success: true, 
            message: '–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            contacts: { email, phone, hours }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏
router.get('/:hash/api/settings/markup', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const markup = await Settings.getMarkupPercent();
        res.json({ markup });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏
// –ù–ê–ô–¢–ò –ò –ó–ê–ú–ï–ù–ò–¢–¨:
router.put('/:hash/api/settings/markup', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const { markup } = req.body;
        
        console.log('üìù –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏:', markup);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (markup === undefined || markup === null) {
            console.log('‚ùå –û–¢–õ–ê–î–ö–ê: –ù–∞—Ü–µ–Ω–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞');
            return res.status(400).json({ error: '–ù–∞—Ü–µ–Ω–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' });
        }
        
        const markupNum = parseFloat(markup);
        console.log('üìù –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞:', markupNum);
        
        if (isNaN(markupNum) || markupNum < 0 || markupNum > 1000) {
            console.log('‚ùå –û–¢–õ–ê–î–ö–ê: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏');
            return res.status(400).json({ error: '–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 1000' });
        }
        
        console.log('üíæ –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É –≤ –ë–î:', markupNum);
        await Settings.setMarkupPercent(markupNum);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        const savedMarkup = await Settings.getMarkupPercent();
        console.log('‚úÖ –û–¢–õ–ê–î–ö–ê: –ù–∞—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:', savedMarkup);
        
        res.json({ 
            success: true, 
            message: '–ù–∞—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            markup: savedMarkup
        });
    } catch (error) {
        console.error('‚ùå –û–¢–õ–ê–î–ö–ê: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
router.get('/:hash/api/settings/notification-email', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const email = await Settings.getNotificationEmail();
        res.json({ email });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
router.put('/:hash/api/settings/notification-email', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const { email } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!email) {
            return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }
        
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
        }
        
        await Settings.setNotificationEmail(email);
        
        res.json({ 
            success: true, 
            message: 'Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω',
            email
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
router.put('/:hash/api/settings/bulk', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const settings = req.body;
        
        if (!settings || Object.keys(settings).length === 0) {
            return res.status(400).json({ error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã' });
        }
        
        const result = await Settings.updateMultiple(settings);
        
        res.json({ 
            success: true, 
            message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            updated: result
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email
router.get('/:hash/api/settings/email-config', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const emailConfig = await Settings.getEmailConfig();
        res.json(emailConfig);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ email:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ email' });
    }
});
// –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ª–æ–≥–∞–º–∏
router.post('/:hash/api/sync-products', adminAuth.checkSecretHash, adminAuth.requireAuth, (req, res) => {
    const { spawn } = require('child_process');
    const path = require('path');
    
    res.writeHead(200, {
        'Content-Type': 'text/plain; charset=utf-8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive'
    });

    try {
        const syncProcess = spawn('node', [path.join(__dirname, '../../src/sync.js')], {
            stdio: ['pipe', 'pipe', 'pipe'],
            cwd: path.join(__dirname, '../../')
        });

        // –î–û–ë–ê–í–ò–¢–¨: –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (30 –º–∏–Ω—É—Ç)
        const timeout = setTimeout(() => {
            console.log('üïê –ü—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
            syncProcess.kill('SIGTERM');
            res.write(`data: ${JSON.stringify({ type: 'error', message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (30 –º–∏–Ω)' })}\n\n`);
            res.end();
        }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

        syncProcess.stdout.on('data', (data) => {
            const output = data.toString();
            res.write(`data: ${JSON.stringify({ type: 'log', message: output })}\n\n`);
        });

        syncProcess.stderr.on('data', (data) => {
            const output = data.toString();
            res.write(`data: ${JSON.stringify({ type: 'error', message: output })}\n\n`);
        });

        syncProcess.on('close', (code) => {
            clearTimeout(timeout); // –î–û–ë–ê–í–ò–¢–¨: –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            const message = code === 0 ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π';
            res.write(`data: ${JSON.stringify({ type: 'complete', code, message })}\n\n`);
            res.end();
        });

        syncProcess.on('error', (error) => {
            clearTimeout(timeout); // –î–û–ë–ê–í–ò–¢–¨: –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            res.write(`data: ${JSON.stringify({ type: 'error', message: `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}` })}\n\n`);
            res.end();
        });

    } catch (error) {
        res.write(`data: ${JSON.stringify({ type: 'error', message: `–û—à–∏–±–∫–∞: ${error.message}` })}\n\n`);
        res.end();
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
router.get('/:hash/api/settings/smtp', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const smtpSettings = await Settings.getSMTPSettings();
        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        const safeSettings = {
            ...smtpSettings,
            password: smtpSettings.password ? '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : ''
        };
        res.json(safeSettings);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
    }
});

// API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
router.put('/:hash/api/settings/smtp', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const { host, port, secure, user, password, enabled } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!host || !port || !user) {
            return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(user)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
        }
        
        const smtpData = {
            host: host.trim(),
            port: parseInt(port),
            secure: Boolean(secure),
            user: user.trim(),
            password: password === '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' ? (await Settings.getSMTPSettings()).password : password.trim(),
            enabled: Boolean(enabled)
        };
        
        await Settings.saveSMTPSettings(smtpData);
        
        res.json({ success: true, message: 'SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
    }
});

// API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SMTP
router.post('/:hash/api/settings/smtp/test', adminAuth.checkSecretHash, adminAuth.requireAuth, async (req, res) => {
    try {
        const smtpSettings = await Settings.getSMTPSettings();
        
        if (!smtpSettings.enabled) {
            return res.status(400).json({ error: 'SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞
        const nodemailer = require('nodemailer');
        
        const transporter = nodemailer.createTransporter({
            host: smtpSettings.host,
            port: smtpSettings.port,
            secure: smtpSettings.secure,
            auth: {
                user: smtpSettings.user,
                pass: smtpSettings.password
            }
        });
        
        await transporter.sendMail({
            from: smtpSettings.user,
            to: smtpSettings.user,
            subject: '–¢–µ—Å—Ç SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫ - ReBike Store',
            text: '–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'
        });
        
        res.json({ success: true, message: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SMTP:', error);
        res.status(500).json({ error: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}` });
    }
});

module.exports = router;