class SettingsManager {
    constructor() {
        this.hash = window.location.pathname.split('/')[2];
        this.apiBase = `/admin/${this.hash}/api`;

        this.init();
    }

    // –î–û–ë–ê–í–ò–¢–¨ –ú–ï–¢–û–î –ü–û–°–õ–ï constructor() –í –ö–ê–ñ–î–û–ú –§–ê–ô–õ–ï:
    setupGlobalErrorHandler() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ fetch –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ 401 –æ—à–∏–±–∫–∏
        const originalFetch = window.fetch;
        window.fetch = async (...args) => {
            const response = await originalFetch(...args);

            if (response.status === 401 && args[0].includes('/admin/')) {
                console.log('üîê –ü–æ–ª—É—á–µ–Ω–∞ 401 –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ö–æ–¥');
                window.location.href = `/admin/${this.hash}`;
                return response;
            }

            return response;
        };
    }


    async init() {
        try {

            this.setupGlobalErrorHandler();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await this.checkAuth();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await this.loadSettings();

            this.setupEventListeners();

            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.redirectToLogin();
        }
    }



    async checkAuth() {
        try {
            const response = await fetch(`/admin/${this.hash}/check-auth`);
            if (!response.ok) {
                throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            return await response.json();
        } catch (error) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    }

    async loadSettings() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const [contacts, markup, notificationEmail] = await Promise.all([
                this.loadContacts(),
                this.loadMarkup(),
                this.loadNotificationEmail()
            ]);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—ã
            this.fillContactsForm(contacts);
            this.fillMarkupForm(markup);
            this.fillEmailForm(notificationEmail);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }

    async loadContacts() {
        const response = await fetch(`${this.apiBase}/settings/contacts`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
        return await response.json();
    }

    async loadMarkup() {
        const response = await fetch(`${this.apiBase}/settings/markup`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏');
        return await response.json();
    }

    async loadNotificationEmail() {
        const response = await fetch(`${this.apiBase}/settings/notification-email`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ email');
        return await response.json();
    }

    fillContactsForm(contacts) {
        document.getElementById('contactEmail').value = contacts.email || '';
        document.getElementById('contactPhone').value = contacts.phone || '';
        document.getElementById('contactHours').value = contacts.hours || '';
    }

    fillMarkupForm(markup) {
        const markupValue = markup.markup || 10;
        document.getElementById('markupPercent').value = markupValue;
        this.updateMarkupPreview(markupValue);
    }

    fillEmailForm(email) {
        document.getElementById('notificationEmail').value = email.email || '';
    }

    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const href = link.getAttribute('href');

                if (href === '#logout') {
                    this.logout();
                } else if (href === '#dashboard') {
                    window.location.href = `/admin/${this.hash}/dashboard`;
                } else if (href === '#orders') {
                    window.location.href = `/admin/${this.hash}/orders`;
                }
            });
        });

        // –§–æ—Ä–º—ã
        document.getElementById('contactsForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveContacts();
        });

        document.getElementById('pricingForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveMarkup();
        });

        document.getElementById('emailForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveNotificationEmail();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –Ω–∞—Ü–µ–Ω–∫–∏
        document.getElementById('markupPercent').addEventListener('input', (e) => {
            this.updateMarkupPreview(parseFloat(e.target.value) || 0);
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        document.getElementById('updateCatalogBtn').addEventListener('click', () => {
            this.updateCatalog();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.getElementById('refreshBtn').addEventListener('click', () => {
            this.loadSettings();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('notification-close')) {
                this.hideNotification();
            }
        });
    }

    async saveContacts() {
        try {
            const formData = new FormData(document.getElementById('contactsForm'));
            const contacts = {
                email: formData.get('email'),
                phone: formData.get('phone'),
                hours: formData.get('hours')
            };

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!contacts.email || !contacts.phone || !contacts.hours) {
                this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', 'error');
                return;
            }

            const response = await fetch(`${this.apiBase}/settings/contacts`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(contacts)
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
            }

            this.showNotification('–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', 'error');
        }
    }

    async saveMarkup() {
        try {
            const markup = parseFloat(document.getElementById('markupPercent').value);

            if (isNaN(markup) || markup < 0 || markup > 1000) {
                this.showNotification('–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 1000', 'error');
                return;
            }

            const response = await fetch(`${this.apiBase}/settings/markup`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ markup })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏');
            }

            this.showNotification('–ù–∞—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏', 'error');
        }
    }

    async saveNotificationEmail() {
        try {
            const email = document.getElementById('notificationEmail').value.trim();

            if (!email) {
                this.showNotification('–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
                return;
            }

            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email', 'error');
                return;
            }

            const response = await fetch(`${this.apiBase}/settings/notification-email`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email');
            }

            this.showNotification('Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email', 'error');
        }
    }

    updateMarkupPreview(markup) {
        const originalPrice = 1000;
        const markupAmount = Math.round(originalPrice * markup / 100);
        const finalPrice = originalPrice + markupAmount;

        document.querySelector('.calculation .original').textContent = `${originalPrice} ‚Ç¨`;
        document.querySelector('.calculation .markup').textContent = `+${markupAmount} ‚Ç¨`;
        document.querySelector('.calculation .final').textContent = `${finalPrice} ‚Ç¨`;
    }

    async updateCatalog() {
        try {
            const btn = document.getElementById('updateCatalogBtn');
            const statusText = document.getElementById('updateStatusText');
            const progress = document.getElementById('updateProgress');

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            btn.disabled = true;
            btn.textContent = '‚è≥ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            statusText.textContent = '–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...';
            progress.style.display = 'block';

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π API endpoint)
            const response = await fetch('/api/parse-now', {
                method: 'POST'
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞');
            }

            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –∏–ª–∏ polling)
            let progressValue = 0;
            const progressInterval = setInterval(() => {
                progressValue += Math.random() * 10;
                if (progressValue > 90) progressValue = 90;

                document.querySelector('.progress-fill').style.width = `${progressValue}%`;

                if (progressValue > 30) statusText.textContent = '–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤...';
                if (progressValue > 60) statusText.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';
                if (progressValue > 80) statusText.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É...';
            }, 500);

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞)
            setTimeout(() => {
                clearInterval(progressInterval);
                document.querySelector('.progress-fill').style.width = '100%';
                statusText.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!';

                setTimeout(() => {
                    progress.style.display = 'none';
                    statusText.textContent = '–ì–æ—Ç–æ–≤ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é';
                    btn.disabled = false;
                    btn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞';
                }, 2000);
            }, 5000);

            this.showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–ø—É—â–µ–Ω–æ', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const btn = document.getElementById('updateCatalogBtn');
            btn.disabled = false;
            btn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞';

            document.getElementById('updateProgress').style.display = 'none';
            document.getElementById('updateStatusText').textContent = '–ì–æ—Ç–æ–≤ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é';
        }
    }

    showNotification(message, type = 'info') {
        const notification = document.getElementById('notification');
        const text = notification.querySelector('.notification-text');

        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã —Ç–∏–ø–æ–≤
        notification.classList.remove('success', 'error', 'info');

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
        notification.classList.add(type);

        text.textContent = message;
        notification.classList.add('show');

        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.hideNotification();
        }, 5000);
    }

    hideNotification() {
        const notification = document.getElementById('notification');
        notification.classList.remove('show');
    }

    async logout() {
        try {
            await fetch(`/admin/${this.hash}/logout`, { method: 'POST' });
            this.redirectToLogin();
        } catch (error) {
            this.redirectToLogin();
        }
    }

    redirectToLogin() {
        window.location.href = `/admin/${this.hash}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let settingsManager;
document.addEventListener('DOMContentLoaded', () => {
    settingsManager = new SettingsManager();
});