class SettingsManager {
    constructor() {
        this.hash = window.location.pathname.split('/')[2];
        this.apiBase = `/admin/${this.hash}/api`;

        this.init();
    }

    // –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ constructor()
    saveSyncState(state) {
        localStorage.setItem('admin_sync_state', JSON.stringify({
            ...state,
            timestamp: Date.now()
        }));
    }

    loadSyncState() {
        try {
            const saved = localStorage.getItem('admin_sync_state');
            if (!saved) return null;

            const state = JSON.parse(saved);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —á–∞—Å–∞
            const hourAgo = Date.now() - (60 * 60 * 1000);

            if (state.timestamp > hourAgo) {
                return state;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', e);
        }
        return null;
    }

    clearSyncState() {
        localStorage.removeItem('admin_sync_state');
    }

    restoreSyncState() {
        const state = this.loadSyncState();
        if (!state) return;

        const progressContainer = document.getElementById('updateProgress');
        const statusText = document.getElementById('updateStatusText');
        const logsContainer = this.createLogsContainer();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
        progressContainer.style.display = 'block';
        statusText.textContent = state.statusText || '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        this.updateProgress(state.progress || 100, state.statusText);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏
        if (state.logs) {
            logsContainer.innerHTML = state.logs;
            logsContainer.scrollTop = logsContainer.scrollHeight;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
        this.addClearButton(progressContainer);
    }

    addClearButton(container) {
        let clearBtn = document.getElementById('clearLogsBtn');
        if (clearBtn) return;

        clearBtn = document.createElement('button');
        clearBtn.id = 'clearLogsBtn';
        clearBtn.textContent = 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏';
        clearBtn.style.cssText = `
        margin-top: 16px;
        padding: 8px 16px;
        background: #6b7280;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 13px;
    `;

        clearBtn.onclick = () => {
            container.style.display = 'none';
            this.clearSyncState();
        };

        container.appendChild(clearBtn);
    }

    // –î–û–ë–ê–í–ò–¢–¨ –ú–ï–¢–û–î –ü–û–°–õ–ï constructor() –í –ö–ê–ñ–î–û–ú –§–ê–ô–õ–ï:
    setupGlobalErrorHandler() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ fetch –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ 401 –æ—à–∏–±–∫–∏
        const originalFetch = window.fetch;
        window.fetch = async (...args) => {
            const response = await originalFetch(...args);

            if (response.status === 401 && args[0].includes('/admin/')) {
                console.log('üîê –ü–æ–ª—É—á–µ–Ω–∞ 401 –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ö–æ–¥');
                window.location.href = `/admin/${this.hash}`;
                return response;
            }

            return response;
        };
    }


    async init() {
        try {
            this.setupGlobalErrorHandler();
            await this.checkAuth();
            await this.loadSettings();
            this.setupEventListeners();

            // –î–û–ë–ê–í–ò–¢–¨: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
                this.restoreSyncState();
            }, 500);

            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.redirectToLogin();
        }
    }



    async checkAuth() {
        try {
            const response = await fetch(`/admin/${this.hash}/check-auth`);
            if (!response.ok) {
                throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            return await response.json();
        } catch (error) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    }

    async loadSettings() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const [contacts, markup, notificationEmail] = await Promise.all([
                this.loadContacts(),
                this.loadMarkup(),
                this.loadNotificationEmail()
            ]);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—ã
            this.fillContactsForm(contacts);
            this.fillMarkupForm(markup);
            this.fillEmailForm(notificationEmail);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }

    async loadContacts() {
        const response = await fetch(`${this.apiBase}/settings/contacts`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
        return await response.json();
    }

    async loadMarkup() {
        const response = await fetch(`${this.apiBase}/settings/markup`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏');
        return await response.json();
    }

    async loadNotificationEmail() {
        const response = await fetch(`${this.apiBase}/settings/notification-email`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ email');
        return await response.json();
    }

    // –î–æ–±–∞–≤—å –ø–æ—Å–ª–µ –º–µ—Ç–æ–¥–∞ loadNotificationEmail()
    async loadSMTPSettings() {
        try {
            const response = await fetch(`${this.apiBase}/settings/smtp`);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SMTP:', error);
            return null;
        }
    }

    // –î–æ–±–∞–≤—å –≤ –º–µ—Ç–æ–¥ loadSettings()
    async loadSettings() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const [contacts, markup, notificationEmail, smtpSettings] = await Promise.all([
                this.loadContacts(),
                this.loadMarkup(),
                this.loadNotificationEmail(),
                this.loadSMTPSettings() // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
            ]);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—ã
            this.fillContactsForm(contacts);
            this.fillMarkupForm(markup);
            this.fillEmailForm(notificationEmail);
            this.fillSMTPForm(smtpSettings); // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
            this.updateSMTPStatus(smtpSettings); // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }

    // –î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è SMTP
    fillSMTPForm(smtpSettings) {
        if (!smtpSettings) return;

        document.getElementById('smtpHost').value = smtpSettings.host || 'smtp.gmail.com';
        document.getElementById('smtpPort').value = smtpSettings.port || 587;
        document.getElementById('smtpSecure').checked = smtpSettings.secure || false;
        document.getElementById('smtpUser').value = smtpSettings.user || '';
        document.getElementById('smtpPassword').value = smtpSettings.password || '';
        document.getElementById('smtpEnabled').checked = smtpSettings.enabled || false;
    }

    updateSMTPStatus(smtpSettings) {
        const statusDot = document.querySelector('.status-dot');
        const statusText = document.querySelector('.status-text');

        if (smtpSettings && smtpSettings.enabled && smtpSettings.user && smtpSettings.password) {
            statusDot.classList.add('active');
            statusText.textContent = `SMTP –Ω–∞—Å—Ç—Ä–æ–µ–Ω (${smtpSettings.user})`;
        } else {
            statusDot.classList.remove('active');
            statusText.textContent = 'SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
        }
    }

    async saveSMTPSettings() {
        try {
            const formData = new FormData(document.getElementById('smtpForm'));
            const smtpData = {
                host: formData.get('host'),
                port: parseInt(formData.get('port')),
                secure: formData.has('secure'),
                user: formData.get('user'),
                password: formData.get('password'),
                enabled: formData.has('enabled')
            };

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!smtpData.host || !smtpData.port || !smtpData.user) {
                this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
                return;
            }

            if (!smtpData.password || smtpData.password === '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢') {
                this.showNotification('–í–≤–µ–¥–∏—Ç–µ App Password', 'error');
                return;
            }

            const response = await fetch(`${this.apiBase}/settings/smtp`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(smtpData)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }

            this.showNotification('SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'success');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            this.updateSMTPStatus(smtpData);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SMTP:', error);
            this.showNotification(error.message, 'error');
        }
    }

    async testSMTP() {
        try {
            const testBtn = document.getElementById('testSmtpBtn');
            testBtn.disabled = true;
            testBtn.textContent = 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...';

            const response = await fetch(`${this.apiBase}/settings/smtp/test`, {
                method: 'POST'
            });

            const result = await response.json();

            if (response.ok) {
                this.showNotification(result.message, 'success');
            } else {
                this.showNotification(result.error, 'error');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SMTP:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞', 'error');
        } finally {
            const testBtn = document.getElementById('testSmtpBtn');
            testBtn.disabled = false;
            testBtn.textContent = 'üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç';
        }
    }

    fillContactsForm(contacts) {
        document.getElementById('contactEmail').value = contacts.email || '';
        document.getElementById('contactPhone').value = contacts.phone || '';
        document.getElementById('contactHours').value = contacts.hours || '';
    }

    fillMarkupForm(markup) {
        const markupValue = markup.markup || 10;
        document.getElementById('markupPercent').value = markupValue;
        this.updateMarkupPreview(markupValue);
    }

    fillEmailForm(email) {
        document.getElementById('notificationEmail').value = email.email || '';
    }

    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const href = link.getAttribute('href');

                if (href === '#logout') {
                    this.logout();
                } else if (href === '#dashboard') {
                    window.location.href = `/admin/${this.hash}/dashboard`;
                } else if (href === '#seo') {
                    window.location.href = `/admin/${this.hash}/seo`;
                } else if (href === '#orders') {
                    window.location.href = `/admin/${this.hash}/orders`;
                }
            });
        });

        // –§–æ—Ä–º–∞ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('smtpForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveSMTPSettings();
        });

        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP
        document.getElementById('testSmtpBtn').addEventListener('click', () => {
            this.testSMTP();
        });

        // –§–æ—Ä–º—ã
        document.getElementById('contactsForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveContacts();
        });

        document.getElementById('pricingForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveMarkup();
        });

        document.getElementById('emailForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveNotificationEmail();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –Ω–∞—Ü–µ–Ω–∫–∏
        document.getElementById('markupPercent').addEventListener('input', (e) => {
            this.updateMarkupPreview(parseFloat(e.target.value) || 0);
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        document.getElementById('updateCatalogBtn').addEventListener('click', () => {
            this.updateCatalog();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.getElementById('refreshBtn').addEventListener('click', () => {
            this.loadSettings();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('notification-close')) {
                this.hideNotification();
            }
        });
    }

    async saveContacts() {
        try {
            const formData = new FormData(document.getElementById('contactsForm'));
            const contacts = {
                email: formData.get('email'),
                phone: formData.get('phone'),
                hours: formData.get('hours')
            };

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!contacts.email || !contacts.phone || !contacts.hours) {
                this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', 'error');
                return;
            }

            const response = await fetch(`${this.apiBase}/settings/contacts`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(contacts)
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
            }

            this.showNotification('–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', 'error');
        }
    }

    async saveMarkup() {
        try {
            const markup = parseFloat(document.getElementById('markupPercent').value);

            if (isNaN(markup) || markup < 0 || markup > 1000) {
                this.showNotification('–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 1000', 'error');
                return;
            }

            const response = await fetch(`${this.apiBase}/settings/markup`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ markup })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏');
            }

            this.showNotification('–ù–∞—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏', 'error');
        }
    }

    async saveNotificationEmail() {
        try {
            const email = document.getElementById('notificationEmail').value.trim();

            if (!email) {
                this.showNotification('–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
                return;
            }

            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email', 'error');
                return;
            }

            const response = await fetch(`${this.apiBase}/settings/notification-email`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email');
            }

            this.showNotification('Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email', 'error');
        }
    }

    updateMarkupPreview(markup) {
        const originalPrice = 1000;
        const markupAmount = Math.round(originalPrice * markup / 100);
        const finalPrice = originalPrice + markupAmount;

        document.querySelector('.calculation .original').textContent = `${originalPrice} ‚Ç¨`;
        document.querySelector('.calculation .markup').textContent = `+${markupAmount} ‚Ç¨`;
        document.querySelector('.calculation .final').textContent = `${finalPrice} ‚Ç¨`;
    }

    async updateCatalog() {
        const button = document.getElementById('updateCatalogBtn');
        const statusText = document.getElementById('updateStatusText');
        const progressContainer = document.getElementById('updateProgress');
        const logsContainer = document.getElementById('sync-logs') || this.createLogsContainer();

        try {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            button.disabled = true;
            button.textContent = '‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—á–∏—â–∞–µ–º –ª–æ–≥–∏
            progressContainer.style.display = 'block';
            statusText.textContent = '–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤...';
            logsContainer.innerHTML = '';

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            let progressValue = 0;
            this.updateProgress(progressValue, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            const response = await fetch(`${this.apiBase}/sync-products`, {
                method: 'POST',
                headers: {
                    'Accept': 'text/plain'
                }
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            }

            // –ß–∏—Ç–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { done, value } = await reader.read();

                if (done) break;

                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');

                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        try {
                            const data = JSON.parse(line.substring(6));
                            this.handleSyncUpdate(data, logsContainer);

                            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤
                            if (data.type === 'log') {
                                progressValue = this.updateProgressFromLog(data.message, progressValue);
                            }
                        } catch (e) {
                            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–∞:', e);
                        }
                    }
                }
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            this.addLogEntry(logsContainer, 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
            this.updateProgress(0, '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error');
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            button.disabled = false;
            button.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤';
        }
    }

    createLogsContainer() {
        const container = document.createElement('div');
        container.id = 'sync-logs';
        container.style.cssText = `
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 16px;
        margin-top: 16px;
        max-height: 400px;
        overflow-y: auto;
        font-family: 'Courier New', monospace;
        font-size: 13px;
        line-height: 1.4;
    `;

        document.getElementById('updateProgress').appendChild(container);
        return container;
    }

    handleSyncUpdate(data, logsContainer) {
        const { type, message, code } = data;

        switch (type) {
            case 'log':
                this.addLogEntry(logsContainer, 'info', message);
                break;
            case 'error':
                this.addLogEntry(logsContainer, 'error', message);
                break;
            case 'complete':
                const status = code === 0 ? 'success' : 'error';
                this.addLogEntry(logsContainer, status, message);
                this.updateProgress(100, message);
                this.showNotification(message, status);
                this.addClearButton(document.getElementById('updateProgress'));
                break;
        }

        // –î–û–ë–ê–í–ò–¢–¨: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveSyncState({
            progress: this.currentProgress || 0,
            statusText: document.getElementById('updateStatusText').textContent,
            logs: logsContainer.innerHTML,
            isRunning: type !== 'complete'
        });
    }
    addLogEntry(container, type, message) {
        const entry = document.createElement('div');
        entry.style.cssText = `
        padding: 4px 0;
        border-bottom: 1px solid #f1f5f9;
        color: ${type === 'error' ? '#e53e3e' : type === 'success' ? '#38a169' : '#4a5568'};
    `;

        const timestamp = new Date().toLocaleTimeString();
        entry.textContent = `[${timestamp}] ${message.trim()}`;

        container.appendChild(entry);
        container.scrollTop = container.scrollHeight;
    }

    updateProgressFromLog(message, currentProgress) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (message.includes('–ó–∞–≥—Ä—É–∂–µ–Ω–æ') && message.includes('—Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π')) {
            return 10;
        } else if (message.includes('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è') && message.includes('/14:')) {
            const match = message.match(/(\d+)\/14/);
            if (match) {
                const category = parseInt(match[1]);
                return 10 + (category / 14) * 80; // 10% –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ + 80% –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            }
        } else if (message.includes('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')) {
            return 95;
        } else if (message.includes('–∑–∞–≤–µ—Ä—à–µ–Ω–∞')) {
            return 100;
        }

        return Math.min(currentProgress + 0.5, 90); // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
    }

    updateProgress(value, text) {
        const progressBar = document.querySelector('.progress-fill');
        const statusText = document.getElementById('updateStatusText');

        if (progressBar) {
            progressBar.style.width = `${value}%`;
        }

        if (statusText && text) {
            statusText.textContent = text;
        }
    }

    showNotification(message, type = 'info') {
        const notification = document.getElementById('notification');
        const text = notification.querySelector('.notification-text');

        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã —Ç–∏–ø–æ–≤
        notification.classList.remove('success', 'error', 'info');

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
        notification.classList.add(type);

        text.textContent = message;
        notification.classList.add('show');

        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.hideNotification();
        }, 5000);
    }

    hideNotification() {
        const notification = document.getElementById('notification');
        notification.classList.remove('show');
    }

    async logout() {
        try {
            await fetch(`/admin/${this.hash}/logout`, { method: 'POST' });
            this.redirectToLogin();
        } catch (error) {
            this.redirectToLogin();
        }
    }

    redirectToLogin() {
        window.location.href = `/admin/${this.hash}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let settingsManager;
document.addEventListener('DOMContentLoaded', () => {
    settingsManager = new SettingsManager();
});