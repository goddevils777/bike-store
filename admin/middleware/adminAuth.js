const adminConfig = require('../../config/admin-config.json');

class AdminAuth {
    constructor() {
        this.sessions = new Map();
        this.loginAttempts = new Map();

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.checkSecretHash = this.checkSecretHash.bind(this);
        this.verifyPin = this.verifyPin.bind(this);
        this.requireAuth = this.requireAuth.bind(this);
        this.logout = this.logout.bind(this);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏
    checkSecretHash(req, res, next) {
        const { hash } = req.params;

        if (hash !== adminConfig.security.secretHash) {
            return res.status(404).send('Page not found');
        }

        next();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω-–∫–æ–¥–∞
    verifyPin(req, res, next) {
        const { pin } = req.body;
        const clientIp = req.ip || req.connection.remoteAddress || 'unknown';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ IP
        if (this.isIpBlocked(clientIp)) {
            return res.status(429).json({
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            });
        }

        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if (pin.toString() !== adminConfig.security.pinCode.toString()) {
            this.recordFailedAttempt(clientIp);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∏–Ω-–∫–æ–¥' });
        }

        // –ü–∏–Ω-–∫–æ–¥ –≤–µ—Ä–Ω—ã–π - —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        const sessionId = this.generateSessionId();
        const session = {
            id: sessionId,
            ip: clientIp,
            createdAt: Date.now(),
            expiresAt: Date.now() + adminConfig.security.sessionDuration
        };

        this.sessions.set(sessionId, session);
        this.clearFailedAttempts(clientIp);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Å–µ—Å—Å–∏–µ–π
        res.cookie('admin_session', sessionId, {
            httpOnly: true,
            secure: false,
            maxAge: adminConfig.security.sessionDuration
        });

        req.session = session;
        next();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏

    requireAuth(req, res, next) {
        const sessionId = req.cookies.admin_session;

        if (!sessionId) {
            console.log('üîê –ù–µ—Ç cookie —Å–µ—Å—Å–∏–∏');
            return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        const session = this.sessions.get(sessionId);

        if (!session) {
            console.log('üîê –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ (–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω)');
            res.clearCookie('admin_session');
            return res.status(401).json({ error: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞' });
        }

        if (session.expiresAt < Date.now()) {
            console.log('üîê –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
            this.sessions.delete(sessionId);
            res.clearCookie('admin_session');
            return res.status(401).json({ error: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        const clientIp = req.ip || req.connection.remoteAddress || 'unknown';
        if (session.ip !== clientIp) {
            console.log('üîê IP –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
            this.sessions.delete(sessionId);
            res.clearCookie('admin_session');
            return res.status(401).json({ error: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' });
        }

        console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞');
        req.session = session;
        next();
    }

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    logout(req, res) {
        const sessionId = req.cookies.admin_session;

        if (sessionId) {
            this.sessions.delete(sessionId);
        }

        res.clearCookie('admin_session');
        res.json({ success: true, message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    generateSessionId() {
        return require('crypto').randomBytes(32).toString('hex');
    }

    recordFailedAttempt(ip) {
        const attempts = this.loginAttempts.get(ip) || { count: 0, firstAttempt: Date.now() };
        attempts.count++;
        attempts.lastAttempt = Date.now();
        this.loginAttempts.set(ip, attempts);
    }

    clearFailedAttempts(ip) {
        this.loginAttempts.delete(ip);
    }

    isIpBlocked(ip) {
        const attempts = this.loginAttempts.get(ip);

        if (!attempts) return false;

        if (attempts.count >= adminConfig.security.maxLoginAttempts) {
            const timeSinceLastAttempt = Date.now() - attempts.lastAttempt;
            return timeSinceLastAttempt < adminConfig.security.lockoutDuration;
        }

        return false;
    }

    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [sessionId, session] of this.sessions.entries()) {
            if (session.expiresAt < now) {
                this.sessions.delete(sessionId);
            }
        }
    }
}

const adminAuth = new AdminAuth();

// –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
setInterval(() => {
    adminAuth.cleanupExpiredSessions();
}, 15 * 60 * 1000);

module.exports = adminAuth;