const express = require('express');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const path = require('path');
const fs = require('fs').promises;
const nodemailer = require('nodemailer');
const config = require('../config/config.json');

// –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∫–∏
const Order = require('../admin/models/Order');
const Settings = require('../admin/models/Settings');
const adminAuthRoutes = require('../admin/routes/auth');
const adminOrdersRoutes = require('../admin/routes/orders');
const adminSettingsRoutes = require('../admin/routes/settings');


const app = express();

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
      "script-src-attr": ["'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
}));

app.use(cors({
  origin: config.security.allowedOrigins
}));

const limiter = rateLimit({
  windowMs: 60 * 1000,
  max: config.security.maxRequestsPerMinute,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
  standardHeaders: true,
  legacyHeaders: false,
  skipSuccessfulRequests: true
});

app.use(limiter);

app.use(express.json({ limit: '10mb' }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, '../public')));

// –î–û–ë–ê–í–ò–¢–¨ –ü–û–°–õ–ï app.use(express.static(...))
app.use('/admin/css', express.static(path.join(__dirname, '../admin/views/css')));
app.use('/admin/js', express.static(path.join(__dirname, '../admin/views/js')));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω–∫–∏
app.use('/admin', adminAuthRoutes);
app.use('/admin', adminOrdersRoutes);
app.use('/admin', adminSettingsRoutes);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω–∫–∏
const adminSeoRoutes = require('../admin/routes/seo');
app.use('/admin', adminSeoRoutes);  // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£

class ShopServer {
  constructor() {
    this.dataFile = path.join(__dirname, '../data/products.json');
    this.allProductsCache = null; // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
    this.setupRoutes();
  }

  async loadProducts() {
    try {
      const data = await fs.readFile(this.dataFile, 'utf8');
      return JSON.parse(data);
    } catch {
      return [];
    }
  }


  async loadCategoryProducts(categoryName) {
    try {
      const filePath = path.join(__dirname, `../data/products_${categoryName}.json`);
      console.log(`üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${filePath}`);

      const data = await fs.readFile(filePath, 'utf8');
      const products = JSON.parse(data);

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${categoryName}`);
      return products;
    } catch (error) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${categoryName}: ${error.message}`);
      return [];
    }
  }

  async loadAllProducts() {
    const targetCategories = [
      'sales', 'all', 'trekking', 'city', 'urban', 'mountain', 'hardtail',
      'fully', 'cargo', 'speed', 'gravel', 'kids', 'classic'
    ];

    let allProducts = [];

    for (const categoryName of targetCategories) {
      try {
        const categoryProducts = await this.loadCategoryProducts(categoryName);
        if (categoryProducts.length > 0) {
          console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryName}: ${categoryProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
          allProducts.push(...categoryProducts);
        } else {
          console.log(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryName}: —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error.message);
      }
    }

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    return allProducts;
  }


  async loadSeoConfig() {
    const path = require('path');
    const fs = require('fs').promises;

    try {
      const seoConfigPath = path.join(__dirname, '../config/seo-config.json');
      const data = await fs.readFile(seoConfigPath, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
      return {
        title: "–≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥—ã - –ö—É–ø–∏—Ç—å E-Bike | ReBike Store",
        description: "–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º. –ì–æ—Ä–æ–¥—Å–∫–∏–µ, –≥–æ—Ä–Ω—ã–µ, –≥—Ä—É–∑–æ–≤—ã–µ e-bike.",
        keywords: "—ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥, e-bike, –∫—É–ø–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥",
        siteName: "ReBike Store",
        author: "ReBike Store",
        robots: "index, follow",
        language: "ru",
        ogTitle: "–≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥—ã - –ö—É–ø–∏—Ç—å E-Bike | ReBike Store",
        ogDescription: "–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º.",
        ogImage: "/images/og-image.jpg",
        ogUrl: "https://yoursite.com"
      };
    }
  }

  setupRoutes() {

    // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞




    app.get('/api/products', async (req, res) => {
      try {
        const { category, page = 1, limit = 24, search = '', sort = 'default' } = req.query;
        console.log(`üîç API –∑–∞–ø—Ä–æ—Å: –∫–∞—Ç–µ–≥–æ—Ä–∏—è="${category}", —Å—Ç—Ä–∞–Ω–∏—Ü–∞=${page}, –ª–∏–º–∏—Ç=${limit}, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞="${sort}"`);

        let allProducts;

        if (!category || category === 'undefined') {
          console.log(`üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º 'all'...`);
          allProducts = await this.loadCategoryProducts('all');
        } else {
          allProducts = await this.loadCategoryProducts(category);
          console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${category}: ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –ö–û –í–°–ï–ú —Ç–æ–≤–∞—Ä–∞–º
        let filteredProducts = allProducts;
        if (search) {
          filteredProducts = allProducts.filter(product =>
            product.title.toLowerCase().includes(search.toLowerCase())
          );
          console.log(`üîç –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ "${search}": ${filteredProducts.length} –∏–∑ ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        }

        // –ü–†–ò–ú–ï–ù–Ø–ï–ú –°–û–†–¢–ò–†–û–í–ö–£ –ü–ï–†–ï–î –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô
        if (sort && sort !== 'default') {
          console.log(`üìä –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: ${sort}`);

          switch (sort) {
            case 'price-asc':
              filteredProducts.sort((a, b) => {
                const priceA = a.currentBasePriceEur || this.extractPrice(a.priceRub) || 0;
                const priceB = b.currentBasePriceEur || this.extractPrice(b.priceRub) || 0;
                return priceA - priceB;
              });
              break;
            case 'price-desc':
              filteredProducts.sort((a, b) => {
                const priceA = a.currentBasePriceEur || this.extractPrice(a.priceRub) || 0;
                const priceB = b.currentBasePriceEur || this.extractPrice(b.priceRub) || 0;
                return priceB - priceA;
              });
              break;
            case 'name-asc':
              filteredProducts.sort((a, b) => a.title.localeCompare(b.title));
              break;
            case 'name-desc':
              filteredProducts.sort((a, b) => b.title.localeCompare(a.title));
              break;
          }
          console.log(`‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ${sort} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ ${filteredProducts.length} —Ç–æ–≤–∞—Ä–∞–º`);
        }

        // –°–ï–†–í–ï–†–ù–ê–Ø –ü–ê–ì–ò–ù–ê–¶–ò–Ø - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const pageNum = parseInt(page);
        const limitNum = parseInt(limit);
        const totalProducts = filteredProducts.length;
        const totalPages = Math.ceil(totalProducts / limitNum);

        const startIndex = (pageNum - 1) * limitNum;
        const endIndex = startIndex + limitNum;
        const pageProducts = filteredProducts.slice(startIndex, endIndex);

        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}/${totalPages}: —Ç–æ–≤–∞—Ä—ã ${startIndex + 1}-${Math.min(endIndex, totalProducts)} –∏–∑ ${totalProducts}`);

        res.json({
          products: pageProducts, // –¢–æ–ª—å–∫–æ 24 —Ç–æ–≤–∞—Ä–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          pagination: {
            currentPage: pageNum,
            totalPages: totalPages, // –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 52 –¥–ª—è 1250 —Ç–æ–≤–∞—Ä–æ–≤)
            totalProducts: totalProducts, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            productsPerPage: limitNum,
            hasNextPage: pageNum < totalPages,
            hasPrevPage: pageNum > 1,
            startIndex: startIndex + 1,
            endIndex: Math.min(endIndex, totalProducts)
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API —Ç–æ–≤–∞—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
      }
    });

    app.get('/api/products/:id', async (req, res) => {
      try {
        console.log(`üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å ID: "${req.params.id}"`);

        // –ö–µ—à–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        if (!this.allProductsCache) {
          console.log(`üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...`);
          this.allProductsCache = await this.loadAllProducts();
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∫–µ—à: ${this.allProductsCache.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        }

        const product = this.allProductsCache.find(p => p.id === req.params.id);

        if (!product) {
          console.log(`‚ùå –¢–æ–≤–∞—Ä —Å ID "${req.params.id}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
          this.allProductsCache = null;
          return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: ${product.title}`);
        res.json(product);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞' });
      }
    });


    app.get('/api/categories', async (req, res) => {
      try {
        const targetCategories = [
          'sales', 'all', 'trekking-city', 'trekking', 'city', 'urban',
          'mountain', 'hardtail', 'fully', 'cargo', 'speed', 'gravel', 'kids', 'classic'
        ];

        const categoriesWithCount = [];

        for (const categoryName of targetCategories) {
          const products = await this.loadCategoryProducts(categoryName);
          categoriesWithCount.push({
            name: categoryName,
            count: products.length,
            available: products.length > 0
          });
        }

        res.json(categoriesWithCount);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
      }
    });

    app.get('/api/contacts', async (req, res) => {
      try {
        const Settings = require('../admin/models/Settings');
        const contacts = await Settings.getContacts();
        res.json(contacts);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        res.json({
          email: 'info@rebike-store.ru',
          phone: '+7 (999) 123-45-67',
          hours: '–ü–Ω-–ü—Ç 9:00-18:00'
        });
      }
    });

    app.get('/api/markup', async (req, res) => {
      try {
        const Settings = require('../admin/models/Settings');
        const markup = await Settings.getMarkupPercent();
        res.json({ markup });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É 10%
        res.json({ markup: 10 });
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    app.post('/api/order', async (req, res) => {
      try {
        const { productId, customerData } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!productId || !customerData || !customerData.name || !customerData.email) {
          return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(customerData.email)) {
          return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        if (!this.allProductsCache) {
          this.allProductsCache = await this.loadAllProducts();
        }
        const product = this.allProductsCache.find(p => p.id === productId);

        if (!product) {
          return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        const orderData = {
          productId: product.id,
          productTitle: product.title,
          productPrice: product.priceRub,
          productUrl: product.url,
          customerName: customerData.name,
          customerEmail: customerData.email,
          customerPhone: customerData.phone,
          customerAddress: customerData.address,
          customerComment: customerData.comment
        };

        const savedOrder = await Order.create(orderData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ email
        await this.sendOrderEmail(product, customerData, savedOrder.id);

        res.json({
          success: true,
          message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
          orderId: savedOrder.id
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞' });
      }
    });

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, '../public/index.html'));
    });

    // –î–û–ë–ê–í–ò–¢–¨ –ü–û–°–õ–ï app.post('/api/order', ...)

    // API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    app.post('/api/parse-now', async (req, res) => {
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        const UpdateScheduler = require('./scheduler');

        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏');

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const scheduler = new UpdateScheduler();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        scheduler.runUpdate().then(() => {
          console.log('‚úÖ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        }).catch((error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        });

        // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏
        res.json({
          success: true,
          message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ'
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞' });
      }
    });


    // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SEO –¥–∞–Ω–Ω—ã—Ö
    app.get('/api/seo', async (req, res) => {
      try {
        const seoConfig = await this.loadSeoConfig();
        res.json(seoConfig);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SEO –∫–æ–Ω—Ñ–∏–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SEO –¥–∞–Ω–Ω—ã—Ö' });
      }
    });

  }

  extractPrice(priceStr) {
    if (!priceStr) return null;
    const match = priceStr.match(/(\d+[\d\s,\.]*)/);
    return match ? parseFloat(match[1].replace(/[\s,]/g, '')) : null;
  }

  async sendOrderEmail(product, customerData, orderId) {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
      const smtpSettings = await this.loadSMTPSettings();

      if (!smtpSettings || !smtpSettings.enabled) {
        console.log('üìß SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω, –ø–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –∞–¥–º–∏–Ω–∫–∏
      const emailSettings = await this.loadEmailSettings();
      const recipientEmail = emailSettings?.email || smtpSettings.user;

      console.log(`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ email: ${recipientEmail}`);

      const nodemailer = require('nodemailer');

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
      const transporter = nodemailer.createTransporter({
        host: smtpSettings.host,
        port: smtpSettings.port,
        secure: smtpSettings.secure,
        auth: {
          user: smtpSettings.user,
          pass: smtpSettings.password
        }
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ HTML –ø–∏—Å—å–º–æ
      const emailHTML = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                <div style="background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%); color: white; padding: 30px; border-radius: 12px 12px 0 0; text-align: center;">
                    <h1 style="margin: 0; font-size: 28px;">üö¥‚Äç‚ôÇÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</h1>
                    <p style="margin: 10px 0 0 0; font-size: 16px;">ReBike Store</p>
                </div>
                
                <div style="background: white; padding: 30px; border: 1px solid #e2e8f0; border-top: none;">
                    <h2 style="color: #2d3748; margin-bottom: 20px;">–ó–∞–∫–∞–∑ #${orderId}</h2>
                    
                    <div style="background: #f7fafc; padding: 20px; border-radius: 8px; margin-bottom: 25px;">
                        <h3 style="color: #2d3748; margin-top: 0;">üö≤ –¢–æ–≤–∞—Ä:</h3>
                        <p style="font-size: 18px; font-weight: 600; color: #2d3748; margin: 10px 0;">${product.title}</p>
                        <p style="font-size: 24px; font-weight: 700; color: #38a169; margin: 10px 0;">${product.priceRub}</p>
                        ${product.originalPriceRub ? `<p style="color: #a0aec0; text-decoration: line-through;">–¶–µ–Ω–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: ${product.originalPriceRub}</p>` : ''}
                        <p style="color: #4a5568; margin: 15px 0 0 0;">
                            <a href="${product.url}" style="color: #4299e1; text-decoration: none;">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª</a>
                        </p>
                    </div>

                    <div style="background: #f0fff4; padding: 20px; border-radius: 8px; margin-bottom: 25px;">
                        <h3 style="color: #22543d; margin-top: 0;">üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</h3>
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr><td style="padding: 8px 0; color: #4a5568; font-weight: 600;">–ò–º—è:</td><td style="padding: 8px 0;">${customerData.name}</td></tr>
                            <tr><td style="padding: 8px 0; color: #4a5568; font-weight: 600;">Email:</td><td style="padding: 8px 0;"><a href="mailto:${customerData.email}" style="color: #4299e1;">${customerData.email}</a></td></tr>
                            <tr><td style="padding: 8px 0; color: #4a5568; font-weight: 600;">–¢–µ–ª–µ—Ñ–æ–Ω:</td><td style="padding: 8px 0;">${customerData.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</td></tr>
                            <tr><td style="padding: 8px 0; color: #4a5568; font-weight: 600;">–ê–¥—Ä–µ—Å:</td><td style="padding: 8px 0;">${customerData.address || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</td></tr>
                            ${customerData.comment ? `<tr><td style="padding: 8px 0; color: #4a5568; font-weight: 600;">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</td><td style="padding: 8px 0;">${customerData.comment}</td></tr>` : ''}
                        </table>
                    </div>

                    <div style="background: #ebf8ff; padding: 20px; border-radius: 8px;">
                        <p style="color: #2c5282; margin: 0; text-align: center;">
                            ‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString('ru-RU')}
                        </p>
                    </div>
                </div>
                
                <div style="background: #f7fafc; padding: 20px; border-radius: 0 0 12px 12px; text-align: center; color: #4a5568; font-size: 14px;">
                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç ReBike Store
                </div>
            </div>
        `;

      const emailText = `
üö¥‚Äç‚ôÇÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderId} - ReBike Store

–¢–û–í–ê–†:
${product.title}
–¶–µ–Ω–∞: ${product.priceRub}
${product.originalPriceRub ? `–¶–µ–Ω–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: ${product.originalPriceRub}` : ''}
–°—Å—ã–ª–∫–∞: ${product.url}

–ü–û–ö–£–ü–ê–¢–ï–õ–¨:
–ò–º—è: ${customerData.name}
Email: ${customerData.email}  
–¢–µ–ª–µ—Ñ–æ–Ω: ${customerData.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ê–¥—Ä–µ—Å: ${customerData.address || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
${customerData.comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${customerData.comment}` : ''}

–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString('ru-RU')}

---
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç ReBike Store
        `;

      await transporter.sendMail({
        from: `"ReBike Store" <${smtpSettings.user}>`,
        to: recipientEmail,
        subject: `üö¥‚Äç‚ôÇÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId}: ${product.title}`,
        text: emailText,
        html: emailHTML
      });

      console.log(`‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: ${recipientEmail}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
    }
  }

async loadSMTPSettings() {
    try {
        const Settings = require('../admin/models/Settings');
        return await Settings.getSMTPSettings();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        return null;
    }
}

async loadEmailSettings() {
    try {
        const Settings = require('../admin/models/Settings');
        const notificationEmail = await Settings.getNotificationEmail();
        return { email: notificationEmail };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ email –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        return null;
    }
}

  start() {
    const port = config.server.port;
    app.listen(port, () => {
      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
      console.log(`API —Ç–æ–≤–∞—Ä–æ–≤: http://localhost:${port}/api/products`);
      console.log(`–ê–¥–º–∏–Ω–∫–∞: http://localhost:${port}/admin/a8f5f167f44f4964e6c998dee827110c`);
    });
  }
}



const server = new ShopServer();
server.start();

module.exports = ShopServer;