const cron = require('node-cron');
const ReBikeParser = require('./parser');
const config = require('../config/config.json');

class UpdateScheduler {
  constructor() {
    this.parser = new ReBikeParser();
    this.isRunning = false;
  }

  async runUpdate() {
    if (this.isRunning) {
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    this.isRunning = true;
    console.log(`[${new Date().toISOString()}] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞`);

    try {
      const result = await this.parser.parseFullUpdate();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (this.hasSignificantChanges(result.changes)) {
        await this.sendUpdateNotification(result.changes);
      }

      console.log(`[${new Date().toISOString()}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
      
    } catch (error) {
      console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:`, error.message);
      await this.sendErrorNotification(error);
    } finally {
      await this.parser.close();
      this.isRunning = false;
    }
  }

  hasSignificantChanges(changes) {
    const totalChanges = changes.added.length + changes.removed.length + changes.updated.length;
    return totalChanges > 0;
  }

  async sendUpdateNotification(changes) {
    const nodemailer = require('nodemailer');
    
    if (!config.email.user || config.email.user === 'your-email@gmail.com') {
      console.log('Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      return;
    }

    try {
      const transporter = nodemailer.createTransporter({
        host: config.email.host,
        port: config.email.port,
        secure: config.email.secure,
        auth: {
          user: config.email.user,
          pass: config.email.password
        }
      });

      const emailText = `
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:

‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${changes.added.length}
‚ùå –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${changes.removed.length}  
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${changes.updated.length}

–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}
      `;

      await transporter.sendMail({
        from: config.email.user,
        to: config.email.to,
        subject: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ ReBike',
        text: emailText
      });

      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  async sendErrorNotification(error) {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error.message);
  }

  start() {
    console.log('–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    
    // –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    cron.schedule('0 */6 * * *', () => {
      this.runUpdate();
    });

    // –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤ 2:00
    cron.schedule('0 2 * * *', () => {
      this.runUpdate();
    });

    console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –∏ –≤ 2:00 –Ω–æ—á–∏');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      this.runUpdate();
    }, 30000);
  }

  async runOnce() {
    console.log('–ó–∞–ø—É—Å–∫ —Ä–∞–∑–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    await this.runUpdate();
    process.exit(0);
  }
}

module.exports = UpdateScheduler;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const scheduler = new UpdateScheduler();
  
  if (process.argv.includes('--once')) {
    scheduler.runOnce();
  } else {
    scheduler.start();
  }
}