const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');
const config = require('../config/config.json');

class ReBikeParser {
  constructor() {
    this.config = config.parser;
    this.pricing = config.pricing;
    this.browser = null;
    this.allProducts = [];
    this.dataFile = path.join(__dirname, '../data/products.json');
    this.changesFile = path.join(__dirname, '../data/changes.json');
  }

  getCategoryFilePath(categoryName) {
    return path.join(__dirname, `../data/products_${categoryName}.json`);
  }

  async loadCategoryProducts(categoryName) {
    try {
      const filePath = this.getCategoryFilePath(categoryName);
      const data = await fs.readFile(filePath, 'utf8');
      return JSON.parse(data);
    } catch {
      return []; // —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
  }

  async saveCategoryProducts(categoryName, products) {
    try {
      const filePath = this.getCategoryFilePath(categoryName);
      await fs.writeFile(filePath, JSON.stringify(products, null, 2));
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ ${filePath}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error);
    }
  }

  async saveIncrementalCategoryProducts(categoryName, newProducts) {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const existingProducts = await this.loadCategoryProducts(categoryName);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏
      const allProducts = [...existingProducts, ...newProducts];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await this.saveCategoryProducts(categoryName, allProducts);

      return allProducts;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${categoryName}:`, error);
      return [];
    }
  }

  async init() {
    await fs.mkdir(path.dirname(this.dataFile), { recursive: true });

    this.browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',           // –î–û–ë–ê–í–ò–¢–¨
        '--disable-accelerated-2d-canvas',   // –î–û–ë–ê–í–ò–¢–¨  
        '--disable-gpu',                     // –î–û–ë–ê–í–ò–¢–¨
        '--window-size=1920,1080'            // –î–û–ë–ê–í–ò–¢–¨
      ],
      timeout: 60000  // –î–û–ë–ê–í–ò–¢–¨ —Ç–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
    });
  }

  async loadExistingProducts() {
    try {
      const data = await fs.readFile(this.dataFile, 'utf8');
      return JSON.parse(data);
    } catch {
      return []; // —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
  }

  async saveProducts(products) {
    await fs.writeFile(this.dataFile, JSON.stringify(products, null, 2));
    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ ${this.dataFile}`);
  }

  async logChanges(changes) {
    const timestamp = new Date().toISOString();
    const changeLog = {
      timestamp,
      changes
    };

    try {
      const existingLogs = JSON.parse(await fs.readFile(this.changesFile, 'utf8'));
      existingLogs.push(changeLog);
      await fs.writeFile(this.changesFile, JSON.stringify(existingLogs, null, 2));
    } catch {
      await fs.writeFile(this.changesFile, JSON.stringify([changeLog], null, 2));
    }
  }

  compareProducts(oldProducts, newProducts) {
    const changes = {
      added: [],
      removed: [],
      updated: []
    };

    const oldMap = new Map(oldProducts.map(p => [p.url, p]));
    const newMap = new Map(newProducts.map(p => [p.url, p]));

    // –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    for (const [url, product] of newMap) {
      if (!oldMap.has(url)) {
        changes.added.push(product);
      }
    }

    // –ù–∞–π—Ç–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for (const [url, product] of oldMap) {
      if (!newMap.has(url)) {
        changes.removed.push(product);
      }
    }

    // –ù–∞–π—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for (const [url, newProduct] of newMap) {
      const oldProduct = oldMap.get(url);
      if (oldProduct) {
        const hasChanges =
          oldProduct.price !== newProduct.price ||
          oldProduct.title !== newProduct.title ||
          oldProduct.originalPrice !== newProduct.originalPrice;

        if (hasChanges) {
          changes.updated.push({
            url,
            old: oldProduct,
            new: newProduct
          });
        }
      }
    }

    return changes;
  }


  async parseFullUpdate() {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞...');

    if (!this.browser) await this.init();

    // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã - –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –Ω—É–ª—è...');

    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
    this.allProducts = [];

    // –ü–∞—Ä—Å–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–Ω–æ–≤–æ
    const newProducts = await this.parseAllProducts();
    console.log(`–°–ø–∞—Ä—Å–µ–Ω–æ ${newProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const categoryGroups = {};
    newProducts.forEach(product => {
      if (!categoryGroups[product.category]) {
        categoryGroups[product.category] = [];
      }
      categoryGroups[product.category].push(product);
    });

    console.log('\nüìÇ –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.entries(categoryGroups).forEach(([category, products]) => {
      console.log(`  ${category}: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    });

    // –ü–û–õ–ù–û–°–¢–¨–Æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    await this.saveProducts(newProducts);

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª–∏ –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥
    const changes = {
      added: newProducts,
      removed: [],
      updated: []
    };

    await this.logChanges({
      timestamp: new Date().toISOString(),
      action: 'full_reload',
      totalProducts: newProducts.length,
      categories: Object.keys(categoryGroups)
    });

    return {
      products: newProducts,
      changes
    };
  }

  async saveIncrementalProducts(newProducts) {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
      const existingProducts = await this.loadExistingProducts();

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ (–Ω–æ–≤—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü)
      const allProducts = [...existingProducts, ...newProducts];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      await this.saveProducts(allProducts);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–æ ${newProducts.length} –Ω–æ–≤—ã—Ö)`);

      return allProducts;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:`, error);
      return [];
    }
  }
  async parseAllProducts() {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–æ–º...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const existingProducts = await this.loadAllProducts();
    console.log(`üì¶ –í –±–∞–∑–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${existingProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–π—Ç–∞
    const currentSiteProducts = [];
    const foundProductUrls = new Set(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

    const targetCategories = [
      { url: 'https://rebike.com/de/rebike1-sales-e-bike-angebote', type: 'sales' },
      { url: 'https://rebike.com/de/gebrauchte-e-bikes-und-pedelecs-kaufen', type: 'all' },
      { url: 'https://rebike.com/de/e-bike-kaufen/trekking-city', type: 'trekking-city' },
      { url: 'https://rebike.com/de/trekkingrad-touren-e-bike-kaufen', type: 'trekking' },
      { url: 'https://rebike.com/de/city-e-bikes', type: 'city' },
      { url: 'https://rebike.com/de/urban-e-bikes', type: 'urban' },
      { url: 'https://rebike.com/de/e-mountainbikes', type: 'mountain' },
      { url: 'https://rebike.com/de/e-mountainbikes/e-bike-hardtail', type: 'hardtail' },
      { url: 'https://rebike.com/de/e-mountainbikes/e-bike-fully', type: 'fully' },
      { url: 'https://rebike.com/de/e-lastenrad-e-bike-kaufen', type: 'cargo' },
      { url: 'https://rebike.com/de/s-pedelecs', type: 'speed' },
      { url: 'https://rebike.com/de/e-gravel-rennraeder', type: 'gravel' },
      { url: 'https://rebike.com/de/kinder-e-bikes', type: 'kids' },
      { url: 'https://rebike.com/de/fahrraeder', type: 'classic' }
    ];

    // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    const startTime = Date.now();
    let lastPauseTime = startTime;

    // –ü–ê–†–°–ò–ú –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ (–ë–ï–ó resume)
    for (let i = 0; i < targetCategories.length; i++) {
      const category = targetCategories[i];
      console.log(`\nüìÇ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${i + 1}/${targetCategories.length}: ${category.type}`);

      try {
        // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º lastProductUrl - –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const categoryProducts = await this.parseCategory(category.url, category.type, null, existingProducts);

        currentSiteProducts.push(...categoryProducts);

        // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        categoryProducts.forEach(product => {
          if (product.url) foundProductUrls.add(product.url);
        });

        // –ü–∞—É–∑—ã –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
        const currentTime = Date.now();
        if (currentTime - lastPauseTime >= 20 * 60 * 1000) {
          const pauseMinutes = Math.floor(Math.random() * 7) + 1;
          console.log(`‚è∏Ô∏è –ü–∞—É–∑–∞ ${pauseMinutes} –º–∏–Ω—É—Ç...`);
          await this.delay(pauseMinutes * 60 * 1000);
          lastPauseTime = Date.now();
        }

        await this.delay(this.config.delay);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${category.type}:`, error.message);
      }
    }

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ: ${currentSiteProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`üóëÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã...`);

    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ)
    const toDelete = existingProducts.filter(product => !foundProductUrls.has(product.url));
    console.log(`‚ùå –ö —É–¥–∞–ª–µ–Ω–∏—é: ${toDelete.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    this.allProducts = currentSiteProducts;
    return { products: currentSiteProducts, deleted: toDelete };
  }

  removeDuplicates(products) {
    const seen = new Set();
    return products.filter(product => {
      if (seen.has(product.url)) {
        return false;
      }
      seen.add(product.url);
      return true;
    });
  }

  removeDuplicatesInCategory(products) {
    const seen = new Set();
    return products.filter(product => {
      if (seen.has(product.url)) {
        return false;
      }
      seen.add(product.url);
      return true;
    });
  }

  checkProductExists(productUrl, existingProducts) {
    return existingProducts.some(product => product.url === productUrl);
  }

  determineCategoryType(url) {
    const urlLower = url.toLowerCase();

    if (urlLower.includes('sales') || urlLower.includes('angebot')) {
      return 'sales';
    } else if (urlLower.includes('gebrauchte')) {
      return 'gebraucht';
    } else if (urlLower.includes('trekking-city') || (urlLower.includes('trekking') && urlLower.includes('city'))) {
      return 'trekking-city';
    } else if (urlLower.includes('trekkingrad') || urlLower.includes('touren')) {
      return 'trekking';
    } else if (urlLower.includes('city-e-bike') || urlLower.includes('city')) {
      return 'city';
    } else if (urlLower.includes('urban')) {
      return 'urban';
    } else if (urlLower.includes('mountainbike') && urlLower.includes('fully')) {
      return 'fully';
    } else if (urlLower.includes('mountainbike') && urlLower.includes('hardtail')) {
      return 'hardtail';
    } else if (urlLower.includes('mountainbike') || urlLower.includes('mtb')) {
      return 'mountain';
    } else if (urlLower.includes('lastenrad') || urlLower.includes('cargo')) {
      return 'cargo';
    } else if (urlLower.includes('s-pedelec') || urlLower.includes('speed')) {
      return 'speed';
    } else if (urlLower.includes('gravel') || urlLower.includes('rennr')) {
      return 'gravel';
    } else if (urlLower.includes('kinder') || urlLower.includes('kids')) {
      return 'kids';
    } else if (urlLower.includes('fahrraeder') || urlLower.includes('klassisch')) {
      return 'classic';
    } else {
      return 'electric';
    }
  }

  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ ...
  async findCategories() {
    const page = await this.browser.newPage();
    await page.setUserAgent(this.config.userAgent);

    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
      await page.goto(this.config.baseUrl, { waitUntil: 'networkidle0' });

      console.log('üìã –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
      const categories = await page.evaluate(() => {
        console.log('–¢–µ–∫—É—â–∏–π URL:', window.location.href);

        // –ò—â–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Å—ã–ª–æ–∫
        const allLinks = Array.from(document.querySelectorAll('a[href]'));
        console.log('–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–æ:', allLinks.length);

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryLinks = allLinks.filter(link => {
          const href = link.href;
          return href.includes('/de/') &&
            !href.includes('?') &&
            href !== window.location.href &&
            !href.includes('#') &&
            link.textContent.trim().length > 0;
        });

        console.log('–°—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryLinks.length);

        const categories = categoryLinks.map(link => ({
          name: link.textContent.trim(),
          url: link.href
        }));

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories.slice(0, 10).forEach((cat, i) => {
          console.log(`${i + 1}. ${cat.name} -> ${cat.url}`);
        });

        return categories;
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
      if (categories.length === 0) {
        console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        await page.evaluate(() => {
          console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', document.title);
          console.log('–ï—Å—Ç—å –ª–∏ –º–µ–Ω—é?', !!document.querySelector('nav, .menu, .navigation'));
          console.log('–ï—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã?', !!document.querySelector('.bike-card'));
        });
      }

      return categories;
    } finally {
      await page.close();
    }
  }
  async parseCategory(categoryUrl, categoryName = 'unknown', lastProductUrl = null, existingProducts = []) {
    const page = await this.browser.newPage();
    await page.setUserAgent(this.config.userAgent);

    try {
      console.log(`–ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryName} (${categoryUrl})`);
      if (lastProductUrl) {
        console.log(`üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≤–∞—Ä–∞: ${lastProductUrl}`);
      }

      let pageNum = 1;
      let hasNextPage = true;
      const categoryProducts = [];

      while (hasNextPage) {
        const url = `${categoryUrl}${categoryUrl.includes('?') ? '&' : '?'}p=${pageNum}`;
        console.log(`  –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: ${url}`);

        await page.goto(url, {
          waitUntil: 'networkidle0',
          timeout: 60000  // –î–û–ë–ê–í–ò–¢–¨ —Ç–∞–π–º–∞—É—Ç
        });
        await this.delay(this.config.delay);

        // –ü–†–û–í–ï–†–Ø–ï–ú –ü–ê–ì–ò–ù–ê–¶–ò–Æ –°–ù–ê–ß–ê–õ–ê
        console.log(`  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}...`);

        const paginationInfo = await page.evaluate(() => {
          const nextButton = document.querySelector('button[aria-label="Go to next page"]');
          const pagination = document.querySelector('.MuiPagination-root');
          const currentPageButton = document.querySelector('.MuiPaginationItem-page.Mui-selected');

          return {
            nextButtonExists: !!nextButton,
            nextButtonDisabled: nextButton ? nextButton.disabled : null,
            nextButtonClasses: nextButton ? nextButton.className : null,
            paginationExists: !!pagination,
            currentPage: currentPageButton ? currentPageButton.textContent : null,
            url: window.location.href,
            totalCards: document.querySelectorAll('.bike-card').length
          };
        });

        console.log(`    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${paginationInfo.paginationExists}`);
        console.log(`    –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –Ω–∞–π–¥–µ–Ω–∞: ${paginationInfo.nextButtonExists}`);
        console.log(`    –ï—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${paginationInfo.nextButtonExists && !paginationInfo.nextButtonDisabled}`);

        const hasNextPageBefore = paginationInfo.nextButtonExists &&
          !paginationInfo.nextButtonDisabled &&
          !paginationInfo.nextButtonClasses?.includes('Mui-disabled');

        // –ü–ê–†–°–ò–ú –¢–û–í–ê–†–´ (–ø–µ—Ä–µ–¥–∞–µ–º lastProductUrl —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        const pageProducts = await this.parsePageProducts(page, categoryName, pageNum === 1 ? lastProductUrl : null, existingProducts);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log(`  üìä –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${paginationInfo.totalCards} —Ç–æ–≤–∞—Ä–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${pageProducts.length}`);

        if (pageProducts.length > 0) {
          categoryProducts.push(...pageProducts);
          console.log(`  ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: –Ω–∞–π–¥–µ–Ω–æ ${pageProducts.length} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);

          // –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–°–õ–ï –ö–ê–ñ–î–û–ô –°–¢–†–ê–ù–ò–¶–´
          try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageProductsWithCategory = pageProducts.map(product => ({
              ...product,
              category: categoryName
            }));

            // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –∏ —Ü–µ–Ω
            const processedPageProducts = this.processProducts(pageProductsWithCategory);
            console.log(`  üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${processedPageProducts.length}`);
            console.log(`  üÜî –ü–µ—Ä–≤—ã–µ ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${processedPageProducts.slice(0, 2).map(p => p.id).join(', ')}`);

            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã  
            const uniquePageProducts = this.removeDuplicatesInCategory(processedPageProducts);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ö–ê–¢–ï–ì–û–†–ò–ò
            await this.saveIncrementalCategoryProducts(categoryName, uniquePageProducts);
            console.log(`  üíæ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName} (${uniquePageProducts.length} —Ç–æ–≤–∞—Ä–æ–≤)`);
          } catch (saveError) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum}:`, saveError.message);
          }
        } else {
          console.log(`  ‚è≠Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç`);
        }

        // –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
        hasNextPage = hasNextPageBefore;
        console.log(`  ‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum + 1}: ${hasNextPage}`);

        if (hasNextPage) {
          pageNum++;
        }

        if (pageNum > 200) {
          console.log(`  ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 100 —Å—Ç—Ä–∞–Ω–∏—Ü`);
          hasNextPage = false;
        }
      }

      console.log(`  –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}: ${categoryProducts.length}`);
      // –¢–æ–≤–∞—Ä—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
      return categoryProducts;
    } finally {
      await page.close();
    }
  }
async parsePageProducts(page, categoryName = 'unknown', lastProductUrl = null, existingProducts = []) {
    try {
      await page.waitForSelector('.bike-card', { timeout: 5000 });
    } catch {
      return [];
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    const cardData = await page.evaluate((category) => {
      return Array.from(document.querySelectorAll('.bike-card')).map(card => {
        const titleLink = card.querySelector('a[href*="/de/"]');
        const title = titleLink ? titleLink.textContent.trim() : null;
        const url = titleLink ? titleLink.href : null;

        const currentPriceEl = card.querySelector('p.css-1bw9inq');
        const currentPrice = currentPriceEl ? currentPriceEl.textContent.trim() : null;

        const originalPriceEl = card.querySelector('p.css-1rh6qqp');
        const originalPrice = originalPriceEl ? originalPriceEl.textContent.trim() : null;

        const image = card.querySelector('img');
        const imageUrl = image ? image.src : null;

        return {
          title,
          currentPrice,
          originalPrice,
          url,
          imageUrl,
          category: category,
          parsedAt: new Date().toISOString()
        };
      }).filter(product => product.title);
    }, categoryName);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –¢–û–õ–¨–ö–û –¢–ï–ö–£–©–ï–ô –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const existingInCurrentCategory = await this.loadCategoryProducts(categoryName);

    let startParsing = lastProductUrl ? false : true;
    let foundLastProduct = false;

    const enhancedProducts = [];

    for (const product of cardData) {
      try {
        // –õ–æ–≥–∏–∫–∞ resume
        if (lastProductUrl && !startParsing) {
          if (product.url === lastProductUrl) {
            console.log(`    üéØ –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä: ${product.title}`);
            startParsing = true;
            foundLastProduct = true;
          } else {
            continue;
          }
        }

        if (!startParsing) {
          continue;
        }

        // –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const existsInCategory = this.checkProductExists(product.url, existingInCurrentCategory);

        if (!foundLastProduct && existsInCategory) {
          console.log(`    ‚è≠Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ ${categoryName}: ${product.title}`);
          continue; // –ü–†–û–°–¢–û –ü–†–û–ü–£–°–ö–ê–ï–ú, –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if (foundLastProduct) {
          foundLastProduct = false;
        }

        // –ü–∞—Ä—Å–∏–º –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        console.log(`    üî• –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: ${product.title}`);

        const productDetails = await this.getProductDetails(page, product.url);

        enhancedProducts.push({
          ...product,
          ...productDetails
        });

        await this.delay(1000);
      } catch (error) {
        console.log(`    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${product.title}:`, error.message);
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
        enhancedProducts.push({
          ...product,
          images: [product.imageUrl].filter(Boolean),
          description: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...',
          specifications: {}
        });
      }
    }

    console.log(`    üìä –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${cardData.length} —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${enhancedProducts.length}`);
    return enhancedProducts;
}


  async getProductDetails(page, productUrl) {
    let retries = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        console.log(`    üìÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏...`);

        // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
        await page.goto(productUrl, {
          waitUntil: 'networkidle0',
          timeout: 45000
        });

        const details = await page.evaluate(() => {
          // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const images = [];
          const imageElements = document.querySelectorAll('img[src*="rebike-photo-nas"]');
          imageElements.forEach(img => {
            if (img.src && !images.includes(img.src)) {
              images.push(img.src);
            }
          });

          // –ë–µ—Ä–µ–º –ª—É—á—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
          let description = '';

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
          const specificDesc = document.querySelector('h1')?.textContent.trim();
          if (specificDesc && specificDesc.length > 20) {
            description = specificDesc;
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç - –±–µ—Ä–µ–º –∏–∑ meta
            const metaDesc = document.querySelector('meta[name="description"]');
            if (metaDesc) {
              description = metaDesc.content;
            }
          }

          // –î–æ–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          const usageDesc = Array.from(document.querySelectorAll('p')).find(p =>
            p.textContent.includes('F√ºr den Alltag') ||
            p.textContent.includes('eignet sich f√ºr') ||
            p.textContent.includes('K√∂rpergr√∂√üe')
          );
          if (usageDesc && description) {
            description += '. ' + usageDesc.textContent.trim();
          }

          // –ü–∞—Ä—Å–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è
          const specs = {};
          const specTables = document.querySelectorAll('table');

          // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã)
          let foundSpecTable = null;
          for (let i = 0; i < specTables.length; i++) {
            const tableText = specTables[i].textContent;
            if (tableText.includes('Artikel-Nr') || tableText.includes('Motor') || tableText.includes('Akku')) {
              foundSpecTable = specTables[i];
              break;
            }
          }

          if (foundSpecTable) {
            const rows = foundSpecTable.querySelectorAll('tr');
            rows.forEach(row => {
              const th = row.querySelector('th');
              const td = row.querySelector('td');
              if (th && td) {
                const key = th.textContent.trim();
                const value = td.textContent.trim();
                if (key && value && key.length < 50 && value.length < 100) {
                  specs[key] = value;
                }
              }
            });
          }

          return {
            images: images.slice(0, 8),
            description: description || 'Detaillierte Beschreibung wird geladen...',
            specifications: specs
          };
        });

        console.log(`    ‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
        return details;

      } catch (error) {
        console.log(`    ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message}`);

        if (attempt < retries) {
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: 2, 4, 6 —Å–µ–∫—É–Ω–¥
          const pauseSeconds = attempt * 4;
          console.log(`    ‚è∏Ô∏è –ü–∞—É–∑–∞ ${pauseSeconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
          await this.delay(pauseSeconds * 1000);
        }
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log(`    ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ`);
    return {
      images: [],
      description: 'Beschreibung wird geladen...',
      specifications: {}
    };
  }
  async findResumePosition(targetCategories) {
    try {
      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø—É—Å—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      for (let i = targetCategories.length - 1; i >= 0; i--) {
        const category = targetCategories[i];
        const categoryProducts = await this.loadCategoryProducts(category.type);

        if (categoryProducts.length > 0) {
          const lastProduct = categoryProducts[categoryProducts.length - 1];
          console.log(`üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.type}: ${lastProduct.title}`);
          console.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.type}, –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä`);

          return {
            categoryIndex: i,
            lastProductUrl: lastProduct.url,
            shouldOverwriteLast: true
          };
        }
      }

      console.log(`üÜï –í—Å–µ —Ñ–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞`);
      return { categoryIndex: 0, lastProductUrl: null, shouldOverwriteLast: false };
    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: ${error.message}, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞`);
      return { categoryIndex: 0, lastProductUrl: null, shouldOverwriteLast: false };
    }
  }

  async removeLastProduct() {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏
      const targetCategories = [
        { type: 'sales' }, { type: 'all' }, { type: 'trekking-city' },
        { type: 'trekking' }, { type: 'city' }, { type: 'urban' },
        { type: 'mountain' }, { type: 'hardtail' }, { type: 'fully' },
        { type: 'cargo' }, { type: 'speed' }, { type: 'gravel' },
        { type: 'kids' }, { type: 'classic' }
      ];

      for (let i = targetCategories.length - 1; i >= 0; i--) {
        const category = targetCategories[i];
        const categoryProducts = await this.loadCategoryProducts(category.type);

        if (categoryProducts.length > 0) {
          const removedProduct = categoryProducts.pop(); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
          await this.saveCategoryProducts(category.type, categoryProducts);
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä –∏–∑ ${category.type}: ${removedProduct.title}`);
          return categoryProducts;
        }
      }

      return [];
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:`, error);
      return [];
    }
  }

  async combineAllCategories() {
    const targetCategories = [
      'sales', 'all', 'trekking-city', 'trekking', 'city', 'urban',
      'mountain', 'hardtail', 'fully', 'cargo', 'speed', 'gravel', 'kids', 'classic'
    ];

    let allProducts = [];

    for (const categoryName of targetCategories) {
      const categoryProducts = await this.loadCategoryProducts(categoryName);
      if (categoryProducts.length > 0) {
        console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryName}: ${categoryProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        allProducts.push(...categoryProducts);
      }
    }

    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    await this.saveProducts(allProducts);

    return allProducts;
  }


  // –ù–ê–ô–¢–ò –ò –ó–ê–ú–ï–ù–ò–¢–¨ –í–ï–°–¨ –ú–ï–¢–û–î processProducts:
  processProducts(products) {
    const categoryStats = {};

    const processedProducts = products.map(product => {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (!categoryStats[product.category]) {
        categoryStats[product.category] = 0;
      }
      categoryStats[product.category]++;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω –ë–ï–ó –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–ê–¶–ï–ù–ö–ò
      const currentPriceNum = this.extractPrice(product.currentPrice);
      const originalPriceNum = this.extractPrice(product.originalPrice);

      // –°–û–•–†–ê–ù–Ø–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –¶–ï–ù–´ –∫–∞–∫ –µ—Å—Ç—å
      let ourCurrentPrice = null;
      let ourOriginalPrice = null;
      let ourDiscount = 0;

      if (currentPriceNum) {
        ourCurrentPrice = currentPriceNum; // –ë–ï–ó –ù–ê–¶–ï–ù–ö–ò
      }

      if (originalPriceNum) {
        ourOriginalPrice = originalPriceNum; // –ë–ï–ó –ù–ê–¶–ï–ù–ö–ò
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å–∫–∏–¥–∫–∏ –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      if (ourCurrentPrice && ourOriginalPrice && ourOriginalPrice > ourCurrentPrice) {
        ourDiscount = Math.round((1 - ourCurrentPrice / ourOriginalPrice) * 100);
      }

      return {
        ...product,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
        originalBasePriceEur: ourOriginalPrice, // –î–û–ë–ê–í–õ–Ø–ï–ú –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        currentBasePriceEur: ourCurrentPrice,   // –î–û–ë–ê–í–õ–Ø–ï–ú –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        priceRub: ourCurrentPrice ? `${ourCurrentPrice} ‚Ç¨` : (product.currentPrice || '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        originalPriceRub: ourOriginalPrice ? `${ourOriginalPrice} ‚Ç¨` : null,
        originalPriceEur: product.originalPrice,
        currentPriceEur: product.currentPrice,
        discountPercent: ourDiscount,
        id: this.generateId(product.url)
      };
    });

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.entries(categoryStats).forEach(([category, count]) => {
      console.log(`  ${category}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
    });

    return processedProducts;
  }

  generateId(url) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º number –∏–∑ URL - —ç—Ç–æ –∏ –µ—Å—Ç—å ID —Ç–æ–≤–∞—Ä–∞
    const numberMatch = url.match(/number=(\d+)/);
    if (numberMatch) {
      return numberMatch[1]; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    }

    // Fallback - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å URL
    const parts = url.split('/');
    const lastPart = parts[parts.length - 1];
    const cleanId = lastPart.split('?')[0];

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    return cleanId.replace(/[^a-zA-Z0-9-]/g, '') || 'unknown';
  }

  extractPrice(priceStr) {
    if (!priceStr) return null;

    // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    const cleanPrice = priceStr.replace(/[‚Ç¨$¬£¬•‚ÇΩ]/g, '').trim();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (1.939 = 1939, 1.939,50 = 1939.50)
    let numberStr = cleanPrice;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è - —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —á–∞—Å—Ç—å
    if (numberStr.includes(',')) {
      const parts = numberStr.split(',');
      // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –∏–∑ —Ü–µ–ª–æ–π —á–∞—Å—Ç–∏ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á)
      const wholePart = parts[0].replace(/\./g, '');
      const decimalPart = parts[1];
      numberStr = wholePart + '.' + decimalPart;
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π, —Ç–æ—á–∫–∏ - —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
      numberStr = numberStr.replace(/\./g, '');
    }

    const result = parseFloat(numberStr);

    return isNaN(result) ? null : result;
  }

  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }
async syncWithWebsite() {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤...');
    
    if (!this.browser) await this.init();
    
    const existingProducts = await this.loadAllProducts();
    console.log(`üì¶ –í –±–∞–∑–µ —Å–µ–π—á–∞—Å: ${existingProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    const result = await this.parseAllProducts();
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${result.products.length}`);
    console.log(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É: ${result.products.length}`);
    
    // –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–û–í –£–ë–ò–†–ê–ï–ú –ü–û–õ–ù–û–°–¢–¨–Æ
    
    return {
        found: result.products,
        deleted: [], // –ë–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ–º
        changes: result.changes || { added: result.products, removed: [], updated: [] }
    };
}

  async removeObsoleteProducts(toDelete) {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã...');

    const targetCategories = [
      'sales', 'all', 'trekking-city', 'trekking', 'city', 'urban',
      'mountain', 'hardtail', 'fully', 'cargo', 'speed', 'gravel', 'kids', 'classic'
    ];

    for (const categoryName of targetCategories) {
      try {
        const categoryProducts = await this.loadCategoryProducts(categoryName);
        const deleteUrls = new Set(toDelete.map(p => p.url));

        const filteredProducts = categoryProducts.filter(product => !deleteUrls.has(product.url));

        if (filteredProducts.length !== categoryProducts.length) {
          await this.saveCategoryProducts(categoryName, filteredProducts);
          const deletedCount = categoryProducts.length - filteredProducts.length;
          console.log(`üóëÔ∏è –ò–∑ ${categoryName} —É–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error);
      }
    }
  }

  async loadAllProducts() {
    const targetCategories = [
      'sales', 'all', 'trekking-city', 'trekking', 'city', 'urban',
      'mountain', 'hardtail', 'fully', 'cargo', 'speed', 'gravel', 'kids', 'classic'
    ];

    let allProducts = [];

    for (const categoryName of targetCategories) {
      try {
        const categoryProducts = await this.loadCategoryProducts(categoryName);
        if (categoryProducts.length > 0) {
          console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryName}: ${categoryProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
          allProducts.push(...categoryProducts);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error.message);
      }
    }

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    return allProducts;
  }


}

module.exports = ReBikeParser;